{"version":3,"sources":["component/GiftGridItem.jsx","component/Helpers/Conection.jsx","component/GifGrid.jsx","component/hooks/useGiftGridItem.jsx","component/Formulario.jsx","component/Navbar.jsx","component/App.jsx","serviceWorker.js","index.js"],"names":["GiftGridItem","id","url","titulo","className","src","alt","getData","hero","a","heroes","encodeURI","fetch","resp","json","data","gifts","map","item","title","images","original","GifGrid","useState","estado","imagen","setImagen","useEffect","then","img","useGiftGridItem","key","Formulario","setHero","gift","setGift","onSubmit","e","preventDefault","console","log","width","type","value","onChange","target","Navbar","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"mNAaeA,EAXM,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,IAAKC,EAAY,EAAZA,OAG5B,OACI,yBAAKC,UAAU,QACX,yBAAKC,IAAKH,EAAKI,IAAKL,IACnB,2BAAIE,K,uBCJAI,EAAO,uCAAG,WAAMC,GAAN,yBAAAC,EAAA,6DAEbC,EAAS,YAAKC,UADNH,MAC4B,EACpCN,EAHa,uDAGwCQ,EAHxC,sDAICE,MAAMV,GAJP,cAIZW,EAJY,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KACDC,EAAQD,EAAKE,KAAI,SAAAC,GACnB,MAAO,CACHjB,GAAIiB,EAAKjB,GACTE,OAAQe,EAAKC,MACbjB,IAAKgB,EAAKE,OAAOC,SAASnB,QAVf,kBAchBc,GAdgB,4CAAH,sDC4BTM,EA3BC,SAAC,GAAY,IAAD,ECAI,SAACd,GAAU,IAAD,EAEVe,mBAAS,CAACR,KAAK,GAAIS,QAAQ,IAFjB,mBAE/BC,EAF+B,KAEvBC,EAFuB,KAqBtC,OAhBAC,qBAAU,WAIFpB,EAAQC,GAAMoB,MAAK,SAAAC,GACfH,EAAU,CAACX,KAAKc,EAAKL,QAAQ,SAMvC,CAAChB,IAKIiB,EDlBwBK,CAHP,EAAVtB,MAGFY,EAHY,EAGjBL,KAHiB,EAGHS,OAGrB,OAEI,yBAAKpB,UAAW,aAGJgB,EAAOH,KAAI,SAACY,GAAD,OACT,kBAAC,EAAD,eACEE,IAAQF,EAAI5B,IACR4B,SE6CbG,EA3DI,WAAO,IAAD,EAEET,mBAAS,IAFX,mBAEhBf,EAFgB,KAEVyB,EAFU,OAGEV,mBAAS,IAHX,mBAGhBW,EAHgB,KAGVC,EAHU,KAwBrB,OACC,yBAAK/B,UAAU,kBAEb,kBAAC,EAAD,CAASI,KAAMA,IAEhB,yBAAKJ,UAAU,UACb,6BAEA,0BAAQgC,SAhBO,SAACC,GAClBA,EAAEC,iBAEFH,EAAQ3B,GACP+B,QAAQC,IAAIN,IAYqB9B,UAAU,aAEtC,yBAAKA,UAAU,cAGf,2BACAA,UAAU,eACVqC,MAAM,MACNC,KAAK,OACNC,MAAQnC,EACRoC,SAAU,SAAAP,GAAC,OAAGJ,EAAQI,EAAEQ,OAAOF,YAQvC,gCC7CYG,EANA,WACX,OACC,kBAAC,EAAD,O,MCmBUC,MAlBf,WAEE,OAEC,yBAAK3C,UAAU,aAEf,kBAAC,EAAD,MACG,kBAAC,EAAD,QCFc4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAQ,kBACb,IAAMC,WADO,KAEb,kBACA,EADA,OAIAC,SAASC,eAAe,SDuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.bc4324db.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst GiftGridItem = ({id, url, titulo}) => {\r\n\r\n     \r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt={id}/>\r\n             <p>{titulo}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GiftGridItem\r\n","\r\n\r\n\r\n  \r\n    export const getData = async(hero) =>{\r\n        const heroe = hero;\r\n        const heroes = `q=${encodeURI(heroe)}` || null\r\n        const url =`https://api.giphy.com/v1/gifs/search?limit=4&${heroes}&api_key=1mJcHsjFYhi8KLJSCIY0fPQDJsgBWRWZ`;\r\n        const  resp = await fetch(url)\r\n        const {data} = await resp.json();\r\n        const gifts = data.map(item =>{\r\n            return {\r\n                id: item.id,\r\n                titulo: item.title,\r\n                url: item.images.original.url\r\n            }\r\n        })\r\n        \r\n    return gifts\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useState, useEffect} from 'react'\r\nimport GiftGridItem from './GiftGridItem'\r\nimport {getData} from './Helpers/Conection'\r\nimport {useGiftGridItem} from './hooks/useGiftGridItem'\r\n\r\nconst GifGrid = ({hero}) => {\r\n\r\n\r\n    const {data:images , estado} = useGiftGridItem(hero)\r\n    \r\n\r\n    return (\r\n        \r\n        <div className= \"card-grid\"> \r\n            \r\n                {\r\n                    images.map((img) =>(\r\n                      <GiftGridItem\r\n                        key = { img.id}\r\n                        {...img}\r\n\r\n                       />\r\n                    \r\n                    ))\r\n                }\r\n\r\n              \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","\r\n\r\nimport {useState, useEffect} from 'react'\r\nimport { getData } from '../Helpers/Conection'\r\n\r\n export const useGiftGridItem = (hero) => {\r\n\r\n    const [imagen, setImagen] = useState({data:[], estado: false})\r\n\r\n  \r\n    useEffect(()=>{\r\n\r\n      \r\n\r\n            getData(hero).then(img => {\r\n                setImagen({data:img, estado: false})\r\n            })\r\n    \r\n      \r\n\r\n\r\n    },[hero])\r\n\r\n\r\n   \r\n\r\n    return imagen\r\n\r\n}\r\n\r\n\r\n","import React, {useState} from 'react'\r\nimport GifGrid from './GifGrid'\r\n\r\n\r\n\r\nconst Formulario = () => {\r\n    \r\n  const [hero, setHero]  = useState('')\r\n  const [gift, setGift]  = useState('')\r\n  // const [ heroe, setHeroe] = React.useState(heroes)\r\n\r\n\r\n\r\n\r\n  // const addElemen= () => {\r\n\r\n  //   console.log('object');\r\n\r\n  // }\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n\r\n      setGift(hero)\r\n       console.log(gift);\r\n  }\r\n\r\n\r\n    return (\r\n     <div className=\"row contenedor\">\r\n       \r\n       <GifGrid hero={hero}/>\r\n        \r\n      <div className=\"col-12\">\r\n        <hr/>\r\n             \r\n        <form   onSubmit={handleSubmit} className=\"m-5  fomu\">\r\n\r\n            <div className=\"form-group\">\r\n\r\n            \r\n            <input \r\n            className=\"form-control\"\r\n            width=\"5px\"         \r\n            type=\"text\"\r\n           value= {hero}\r\n           onChange={e =>setHero(e.target.value)}\r\n           />\r\n       \r\n            </div>\r\n\r\n        \r\n        </form>\r\n        \r\n   <hr/>\r\n      \r\n      </div>\r\n       \r\n      \r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Formulario\r\n","\r\nimport React from 'react'\r\nimport Formulario from './Formulario'\r\n\r\nconst Navbar = () => {\r\n    return (\r\n     <Formulario/>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react';\n import Navbar from './Navbar';\nimport '../component/App.css'\nimport GifGrid from './GifGrid';\n\n\n\nfunction App() {\n\n  return (\n\n   <div className=\"container\">\n   \n   <Navbar/>\n      <GifGrid/>\n      \n     \n   </div>\n     \n    \n\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <\n    React.StrictMode >\n    <\n    App / >\n    <\n    /React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}